math :: import("dash:math");

export fn expand(iter: obj) {
  values := [];
  while !iter.done()
    values = values.add(iter.next());
  values
}

export fn range(start:i64, stop:i64, step:i64) {
  if step == 0 
    throw "step cannot be 0";
  if !math.is_finite(step as f64)
    throw "step must be finite";
    
  stepSign :: math.sign(step as f64);
  i := start;

  return #{
    done :: fn() =>
      stepSign != math.sign((stop - i) as f64);
    next :: fn() {
      j :: i;
      i = i + step;
      j
    }
  }
}
